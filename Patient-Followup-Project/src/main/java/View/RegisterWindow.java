/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Controller.DoctorJpaController;
import Controller.PatientJpaController;
import Model.Person;
import Controller.PersonJpaController;
import Model.Doctor;
import Model.Patient;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

/**
 *
 * @author manal
 */
public class RegisterWindow extends javax.swing.JFrame {

    /**
     * Creates new form RegisterWindow
     */
    private final EntityManagerFactory emfac = Persistence.createEntityManagerFactory("patientfollowup");
    PersonJpaController personCtrl = new PersonJpaController(emfac);
    PatientJpaController patientCtrl = new PatientJpaController(emfac);
    DoctorJpaController doctorCtrl = new DoctorJpaController(emfac);

    //private int id;
    private int role = 0;
    private int pw = 0;
    private int inami = 0;
    private Date date = null;

    private boolean databoolean = false;

    private final String format = "yyyy-MM-dd";
    private final SimpleDateFormat sdf = new SimpleDateFormat(format);

    private String error = "";

    public RegisterWindow() {
        initComponents();
        errorText.setText(error);
        errorText.setVisible(true);
        inamiTextField.setVisible(false);
        inamiLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        dateOfBirthLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        confirmPasswordLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        dateOfBirthTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        passwordField2 = new javax.swing.JPasswordField();
        emailTextField = new javax.swing.JTextField();
        registerButton = new javax.swing.JButton();
        errorText = new javax.swing.JTextField();
        inamiLabel = new javax.swing.JLabel();
        inamiTextField = new javax.swing.JTextField();
        roleComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        titleLabel.setText("Register here");

        nameLabel.setText("Last Name");

        firstNameLabel.setText("First Name");

        dateOfBirthLabel.setText("Date of Birth");

        emailLabel.setText("E-mail address");

        passwordLabel.setText("Password");

        confirmPasswordLabel.setText("Confirm password");

        dateOfBirthTextField.setText("yyyy-mm-dd");

        registerButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        errorText.setEditable(false);

        inamiLabel.setText("INAMI");
        inamiLabel.setEnabled(false);

        inamiTextField.setEnabled(false);

        roleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Patient", "Doctor" }));
        roleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Select your role :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(registerButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(titleLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorText)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(firstNameLabel)
                                    .addComponent(nameLabel)
                                    .addComponent(dateOfBirthLabel)
                                    .addComponent(emailLabel)
                                    .addComponent(passwordLabel)
                                    .addComponent(confirmPasswordLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(dateOfBirthTextField)
                                        .addComponent(firstNameTextField)
                                        .addComponent(lastNameTextField)
                                        .addComponent(passwordField)
                                        .addComponent(passwordField2))
                                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(136, 136, 136)
                                        .addComponent(inamiLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(inamiTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(82, 82, 82)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLabel)
                            .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstNameLabel)
                            .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateOfBirthLabel)
                            .addComponent(dateOfBirthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailLabel)
                            .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordLabel)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(confirmPasswordLabel)
                            .addComponent(passwordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inamiLabel)
                            .addComponent(inamiTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(errorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int checkPassword() {
        String pw1, pw2;
        pw1 = String.valueOf(passwordField.getPassword());
        pw2 = String.valueOf(passwordField2.getPassword());
        if (pw1.equals(pw2)) {
            if (pw1.length() > 3) {
                try {
                    pw = Integer.parseInt(pw1);
                } catch (IllegalArgumentException ex) {
                    pw = 0;
                    error += ("Only use numbers in password. ");
                }
            } else {
                pw = 0;
                error += "Password needs minimum 4 characters.";
            }
        } else {
            pw = 0;
            error += ("Passwords are different. ");
        }
        return pw;
    }

    private boolean dataIsComplete() {
        if (lastNameTextField.getText().equalsIgnoreCase("")) {
            databoolean = false;
            error += ("Fill in all the information. ");
        } else if (firstNameTextField.getText().equalsIgnoreCase("")) {
            databoolean = false;
            error += ("Fill in all the information. ");
        } else if (dateOfBirthTextField.getText().equalsIgnoreCase("yyyy-mm-dd")) {
            databoolean = false;
            error += ("Fill in all the information. ");
        } else if (emailTextField.getText().equalsIgnoreCase("")) {
            databoolean = false;
            error += ("Fill in all the information. ");
        } else if (inamiTextField.getText().equalsIgnoreCase("") && role == 1) {
            databoolean = false;
            error += ("Fill in all the information. ");
        } else {
            databoolean = true;
        }
        return databoolean;
    }

    private Date checkDate() {
        try {
            date = sdf.parse(String.valueOf(dateOfBirthTextField.getText()));
        } catch (NullPointerException | IllegalArgumentException | ParseException ex) {
            date = null;
            error += "Date format has to be yyyy-mm-dd. ";
        }
        return date;
    }

    private void checkInami() {
        if (role == 1) {
            String i = String.valueOf(inamiTextField.getText());
            try {
                inami = Integer.parseInt(i);
            } catch (NumberFormatException ex) {
                inami = 0;
                error += ("Invalid INAMI format. ");
            }
        }
    }

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        dataIsComplete();
        checkPassword();
        checkDate();
        checkInami();
        errorText.setText(error);
        error = "";
        if (databoolean && pw != 0 && date != null) {
            Person person = new Person();
            person.setLastname(lastNameTextField.getText());
            person.setFirstname(firstNameTextField.getText());
            person.setDateofbirth(date);
            person.setPassword(pw);
            person.setEmailadress(emailTextField.getText());
            person.setRole(role);
            personCtrl.create(person);
            if (role == 0) {
                Patient patient = new Patient();
                patient.setIdperson(person);
                patientCtrl.create(patient);
                this.dispose();
            } else if (role == 1) {
                if (inami != 0) {
                    Doctor doctor = new Doctor();
                    doctor.setIdperson(person);
                    doctor.setInami(inami);
                    doctorCtrl.create(doctor);
                    this.dispose();
                }
            }
        }
    }//GEN-LAST:event_registerButtonActionPerformed

    private void roleComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleComboBoxActionPerformed
        if ((roleComboBox.getSelectedItem().toString()).equalsIgnoreCase("Patient")) {
            inamiLabel.setVisible(false);
            inamiLabel.setEnabled(false);
            inamiTextField.setText("");
            inamiTextField.setVisible(false);
            inamiTextField.setEnabled(false);
            role = 0;
        } else if ((roleComboBox.getSelectedItem().toString()).equalsIgnoreCase("Doctor")) {
            inamiLabel.setVisible(true);
            inamiLabel.setEnabled(true);
            inamiTextField.setVisible(true);
            inamiTextField.setEnabled(true);
            role = 1;
        }
    }//GEN-LAST:event_roleComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JLabel dateOfBirthLabel;
    private javax.swing.JTextField dateOfBirthTextField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField errorText;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JLabel inamiLabel;
    private javax.swing.JTextField inamiTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPasswordField passwordField2;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton registerButton;
    private javax.swing.JComboBox<String> roleComboBox;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
